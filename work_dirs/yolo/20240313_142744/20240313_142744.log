2024/03/13 14:27:44 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.0 (default, Nov 15 2020, 14:28:56) [GCC 7.3.0]
    CUDA available: True
    numpy_random_seed: 1504413244
    GPU 0: NVIDIA GeForce RTX 3090
    CUDA_HOME: /usr/local/cuda-11.8
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 2.1.0+cu118
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.1.1 (Git Hash 64f6bcbcbab628e96f33a62c3e975f8535a7bde4)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.7
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-invalid-partial-specialization -Wno-unused-private-field -Wno-aligned-allocation-unavailable -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.1.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.16.0+cu118
    OpenCV: 4.8.1
    MMEngine: 0.10.2

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1504413244
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/03/13 14:27:45 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=64, enable=False)
backend_args = None
base_lr = 0.01
custom_hooks = [
    dict(num_last_epochs=15, priority=48, type='YOLOXModeSwitchHook'),
    dict(priority=48, type='SyncNormHook'),
    dict(
        ema_type='ExpMomentumEMA',
        momentum=0.0001,
        priority=49,
        type='EMAHook',
        update_buffers=True),
]
custom_imports = dict(
    allow_failed_imports=False, imports=[
        'mmprojects.liu_detection',
    ])
data_root = 'data/Liu/images/'
dataset_type = 'LiuDataset'
default_hooks = dict(
    checkpoint=dict(interval=10, max_keep_ckpts=3, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='DetVisualizationHook'))
default_scope = 'mmdet'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_scale = (
    4024,
    3036,
)
img_scales = [
    (
        640,
        640,
    ),
    (
        320,
        320,
    ),
    (
        960,
        960,
    ),
]
interval = 10
launcher = 'none'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
max_epochs = 300
model = dict(
    backbone=dict(
        act_cfg=dict(type='Swish'),
        deepen_factor=0.33,
        norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
        out_indices=(
            2,
            3,
            4,
        ),
        spp_kernal_sizes=(
            5,
            9,
            13,
        ),
        type='CSPDarknet',
        use_depthwise=False,
        widen_factor=0.5),
    bbox_head=dict(
        act_cfg=dict(type='Swish'),
        feat_channels=128,
        in_channels=128,
        loss_bbox=dict(
            eps=1e-16,
            loss_weight=5.0,
            mode='square',
            reduction='sum',
            type='IoULoss'),
        loss_cls=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        loss_l1=dict(loss_weight=1.0, reduction='sum', type='L1Loss'),
        loss_obj=dict(
            loss_weight=1.0,
            reduction='sum',
            type='CrossEntropyLoss',
            use_sigmoid=True),
        norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
        num_classes=2,
        stacked_convs=2,
        strides=(
            8,
            16,
            32,
        ),
        type='YOLOXHead',
        use_depthwise=False),
    data_preprocessor=dict(
        batch_augments=[
            dict(
                interval=10,
                random_size_range=(
                    480,
                    800,
                ),
                size_divisor=32,
                type='BatchSyncRandomResize'),
        ],
        pad_size_divisor=32,
        type='DetDataPreprocessor'),
    neck=dict(
        act_cfg=dict(type='Swish'),
        in_channels=[
            128,
            256,
            512,
        ],
        norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
        num_csp_blocks=1,
        out_channels=128,
        type='YOLOXPAFPN',
        upsample_cfg=dict(mode='nearest', scale_factor=2),
        use_depthwise=False),
    test_cfg=dict(nms=dict(iou_threshold=0.65, type='nms'), score_thr=0.01),
    train_cfg=dict(assigner=dict(center_radius=2.5, type='SimOTAAssigner')),
    type='YOLOX')
num_last_epochs = 15
optim_wrapper = dict(
    optimizer=dict(
        lr=0.01, momentum=0.9, nesterov=True, type='SGD', weight_decay=0.0005),
    paramwise_cfg=dict(bias_decay_mult=0.0, norm_decay_mult=0.0),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=5,
        type='mmdet.QuadraticWarmupLR'),
    dict(
        T_max=285,
        begin=5,
        by_epoch=True,
        convert_to_iter_based=True,
        end=285,
        eta_min=0.0005,
        type='CosineAnnealingLR'),
    dict(begin=285, by_epoch=True, end=300, factor=1, type='ConstantLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=8,
    dataset=dict(
        ann_file='annotations/val_coco.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='data/Liu/images/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                4024,
                3036,
            ), type='Resize'),
            dict(
                pad_to_square=True,
                pad_val=dict(img=(
                    114.0,
                    114.0,
                    114.0,
                )),
                type='Pad'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='LiuDataset'),
    drop_last=False,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/Liu/images/annotations/val_coco.json',
    backend_args=None,
    metric='bbox',
    type='CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(keep_ratio=True, scale=(
        4024,
        3036,
    ), type='Resize'),
    dict(
        pad_to_square=True,
        pad_val=dict(img=(
            114.0,
            114.0,
            114.0,
        )),
        type='Pad'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
        ),
        type='PackDetInputs'),
]
train_cfg = dict(max_epochs=300, type='EpochBasedTrainLoop', val_interval=10)
train_dataloader = dict(
    batch_size=8,
    dataset=dict(
        dataset=dict(
            ann_file='annotations/train_coco.json',
            backend_args=None,
            data_prefix=dict(img='trains/'),
            data_root='data/Liu/images/',
            filter_cfg=dict(filter_empty_gt=False, min_size=32),
            pipeline=[
                dict(backend_args=None, type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True),
            ],
            type='LiuDataset'),
        pipeline=[
            dict(img_scale=(
                4024,
                3036,
            ), pad_val=114.0, type='Mosaic'),
            dict(
                border=(
                    -2012,
                    -1518,
                ),
                scaling_ratio_range=(
                    0.1,
                    2,
                ),
                type='RandomAffine'),
            dict(
                img_scale=(
                    4024,
                    3036,
                ),
                pad_val=114.0,
                ratio_range=(
                    0.8,
                    1.6,
                ),
                type='MixUp'),
            dict(type='YOLOXHSVRandomAug'),
            dict(prob=0.5, type='RandomFlip'),
            dict(keep_ratio=True, scale=(
                4024,
                3036,
            ), type='Resize'),
            dict(
                pad_to_square=True,
                pad_val=dict(img=(
                    114.0,
                    114.0,
                    114.0,
                )),
                type='Pad'),
            dict(
                keep_empty=False,
                min_gt_bbox_wh=(
                    1,
                    1,
                ),
                type='FilterAnnotations'),
            dict(type='PackDetInputs'),
        ],
        type='MultiImageMixDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_dataset = dict(
    dataset=dict(
        ann_file='annotations/train_coco.json',
        backend_args=None,
        data_prefix=dict(img='trains/'),
        data_root='data/Liu/images/',
        filter_cfg=dict(filter_empty_gt=False, min_size=32),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
        ],
        type='LiuDataset'),
    pipeline=[
        dict(img_scale=(
            4024,
            3036,
        ), pad_val=114.0, type='Mosaic'),
        dict(
            border=(
                -2012,
                -1518,
            ),
            scaling_ratio_range=(
                0.1,
                2,
            ),
            type='RandomAffine'),
        dict(
            img_scale=(
                4024,
                3036,
            ),
            pad_val=114.0,
            ratio_range=(
                0.8,
                1.6,
            ),
            type='MixUp'),
        dict(type='YOLOXHSVRandomAug'),
        dict(prob=0.5, type='RandomFlip'),
        dict(keep_ratio=True, scale=(
            4024,
            3036,
        ), type='Resize'),
        dict(
            pad_to_square=True,
            pad_val=dict(img=(
                114.0,
                114.0,
                114.0,
            )),
            type='Pad'),
        dict(
            keep_empty=False,
            min_gt_bbox_wh=(
                1,
                1,
            ),
            type='FilterAnnotations'),
        dict(type='PackDetInputs'),
    ],
    type='MultiImageMixDataset')
train_pipeline = [
    dict(img_scale=(
        4024,
        3036,
    ), pad_val=114.0, type='Mosaic'),
    dict(
        border=(
            -2012,
            -1518,
        ),
        scaling_ratio_range=(
            0.1,
            2,
        ),
        type='RandomAffine'),
    dict(
        img_scale=(
            4024,
            3036,
        ),
        pad_val=114.0,
        ratio_range=(
            0.8,
            1.6,
        ),
        type='MixUp'),
    dict(type='YOLOXHSVRandomAug'),
    dict(prob=0.5, type='RandomFlip'),
    dict(keep_ratio=True, scale=(
        4024,
        3036,
    ), type='Resize'),
    dict(
        pad_to_square=True,
        pad_val=dict(img=(
            114.0,
            114.0,
            114.0,
        )),
        type='Pad'),
    dict(keep_empty=False, min_gt_bbox_wh=(
        1,
        1,
    ), type='FilterAnnotations'),
    dict(type='PackDetInputs'),
]
tta_model = dict(
    tta_cfg=dict(max_per_img=100, nms=dict(iou_threshold=0.65, type='nms')),
    type='DetTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale=(
                    640,
                    640,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    320,
                    320,
                ), type='Resize'),
                dict(keep_ratio=True, scale=(
                    960,
                    960,
                ), type='Resize'),
            ],
            [
                dict(prob=1.0, type='RandomFlip'),
                dict(prob=0.0, type='RandomFlip'),
            ],
            [
                dict(
                    pad_to_square=True,
                    pad_val=dict(img=(
                        114.0,
                        114.0,
                        114.0,
                    )),
                    type='Pad'),
            ],
            [
                dict(type='LoadAnnotations', with_bbox=True),
            ],
            [
                dict(
                    meta_keys=(
                        'img_id',
                        'img_path',
                        'ori_shape',
                        'img_shape',
                        'scale_factor',
                        'flip',
                        'flip_direction',
                    ),
                    type='PackDetInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=8,
    dataset=dict(
        ann_file='annotations/val_coco.json',
        backend_args=None,
        data_prefix=dict(img='val/'),
        data_root='data/Liu/images/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(keep_ratio=True, scale=(
                4024,
                3036,
            ), type='Resize'),
            dict(
                pad_to_square=True,
                pad_val=dict(img=(
                    114.0,
                    114.0,
                    114.0,
                )),
                type='Pad'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                ),
                type='PackDetInputs'),
        ],
        test_mode=True,
        type='LiuDataset'),
    drop_last=False,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/Liu/images/annotations/val_coco.json',
    backend_args=None,
    metric='bbox',
    type='CocoMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/yolo'

2024/03/13 14:27:46 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/03/13 14:27:46 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_load_checkpoint:
(49          ) EMAHook                            
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(48          ) YOLOXModeSwitchHook                
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(48          ) SyncNormHook                       
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_save_checkpoint:
(49          ) EMAHook                            
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/03/13 14:27:47 - mmengine - INFO - image shape: height=3036, width=4024 in Mosaic.__init__
2024/03/13 14:27:47 - mmengine - INFO - image shape: height=3036, width=4024 in MixUp.__init__
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stem.conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stem.conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.1.conv1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.1.conv1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.1.conv2.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.1.conv2.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.2.conv1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.2.conv1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.2.conv2.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.2.conv2.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.1.conv1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.1.conv1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.1.conv2.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.1.conv2.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.2.conv1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.2.conv1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.2.conv2.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.2.conv2.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_cls_convs.0.0.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_cls_convs.0.0.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_cls_convs.0.1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_cls_convs.0.1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_cls_convs.1.0.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_cls_convs.1.0.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_cls_convs.1.1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_cls_convs.1.1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_cls_convs.2.0.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_cls_convs.2.0.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_cls_convs.2.1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_cls_convs.2.1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_reg_convs.0.0.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_reg_convs.0.0.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_reg_convs.0.1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_reg_convs.0.1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_reg_convs.1.0.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_reg_convs.1.0.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_reg_convs.1.1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_reg_convs.1.1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_reg_convs.2.0.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_reg_convs.2.0.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_reg_convs.2.1.bn.weight:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_reg_convs.2.1.bn.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_conv_cls.0.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_conv_cls.1.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_conv_cls.2.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_conv_reg.0.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_conv_reg.1.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_conv_reg.2.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_conv_obj.0.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_conv_obj.1.bias:weight_decay=0.0
2024/03/13 14:27:47 - mmengine - INFO - paramwise_options -- bbox_head.multi_level_conv_obj.2.bias:weight_decay=0.0
Name of parameter - Initialization information

backbone.stem.conv.conv.weight - torch.Size([32, 12, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stem.conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stem.conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.0.conv.weight - torch.Size([64, 32, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.main_conv.conv.weight - torch.Size([32, 64, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.main_conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.main_conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.short_conv.conv.weight - torch.Size([32, 64, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.short_conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.short_conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.final_conv.conv.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.final_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.final_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([32, 32, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.0.conv2.conv.weight - torch.Size([32, 32, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.blocks.0.conv2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.0.conv2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.0.conv.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.main_conv.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.main_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.main_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.short_conv.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.short_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.short_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.final_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.final_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.final_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.0.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.0.conv2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.0.conv2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.1.conv1.conv.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.1.conv1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.1.conv1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.1.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.1.conv2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.1.conv2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.2.conv1.conv.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.2.conv1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.2.conv1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.2.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.2.conv2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.2.conv2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.0.conv.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.main_conv.conv.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.main_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.main_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.short_conv.conv.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.short_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.short_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.final_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.final_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.final_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.0.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.0.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.1.conv1.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.1.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.1.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.1.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.1.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.1.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.2.conv1.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.2.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.2.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.2.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.2.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.2.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.0.conv.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.1.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.1.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.1.conv2.conv.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.1.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.1.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.main_conv.conv.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.main_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.main_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.short_conv.conv.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.short_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.short_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.final_conv.conv.weight - torch.Size([512, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.final_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.final_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.0.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.blocks.0.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.0.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.reduce_layers.0.conv.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.reduce_layers.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.reduce_layers.1.conv.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.reduce_layers.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.0.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.0.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.0.conv2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.downsamples.0.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.downsamples.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.downsamples.1.conv.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.downsamples.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.0.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([512, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.0.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.0.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.0.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.1.conv.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.2.conv.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.0.0.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.0.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.0.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.0.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.0.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.0.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.1.0.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.1.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.1.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.1.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.1.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.1.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.2.0.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.2.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.2.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.2.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.2.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.2.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.0.0.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.0.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.0.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.0.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.0.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.0.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.1.0.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.1.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.1.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.1.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.1.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.1.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.2.0.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.2.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.2.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.2.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.2.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.2.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_conv_cls.0.weight - torch.Size([2, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_cls.0.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in YOLOXHead  

bbox_head.multi_level_conv_cls.1.weight - torch.Size([2, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_cls.1.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in YOLOXHead  

bbox_head.multi_level_conv_cls.2.weight - torch.Size([2, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_cls.2.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in YOLOXHead  

bbox_head.multi_level_conv_reg.0.weight - torch.Size([4, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_reg.0.bias - torch.Size([4]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_reg.1.weight - torch.Size([4, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_reg.1.bias - torch.Size([4]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_reg.2.weight - torch.Size([4, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_reg.2.bias - torch.Size([4]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_obj.0.weight - torch.Size([1, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_obj.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in YOLOXHead  

bbox_head.multi_level_conv_obj.1.weight - torch.Size([1, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_obj.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in YOLOXHead  

bbox_head.multi_level_conv_obj.2.weight - torch.Size([1, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_obj.2.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in YOLOXHead  
2024/03/13 14:27:47 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/03/13 14:27:47 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/03/13 14:27:47 - mmengine - INFO - Checkpoints will be saved to /media/alan/新加卷1/Master/日常工作/帮助身边人/SonLiu/Detection/codes/work_dirs/yolo.
